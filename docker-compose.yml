version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: ${DB_NAME:-cc_webapp}
      POSTGRES_USER: ${DB_USER:-cc_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-cc_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-cc_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 캐시
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Kafka (이벤트 스트리밍)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: cc_zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: cc_kafka
    ports:
      - "${KAFKA_HOST_PORT:-9093}:9093"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_HOST_PORT:-9093}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "cub kafka-ready -b kafka:29092 1 20 || /usr/bin/kafka-broker-api-versions --bootstrap-server kafka:29092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 15s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      # 데이터베이스 설정
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_password}
      
      # Redis 설정
      REDIS_HOST: redis
      REDIS_PORT: 6379
        # Kafka 설정
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # JWT 설정
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-here}
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: 30
      
      # 앱 설정
      APP_ENV: ${APP_ENV:-development}
      DEBUG: ${DEBUG:-true}
      
      # 사이버 토큰 설정
      INITIAL_CYBER_TOKENS: 200
      
      # 본사 사이트 연동 설정
      CORPORATE_SITE_URL: ${CORPORATE_SITE_URL:-http://localhost:8080}
      CORPORATE_API_KEY: ${CORPORATE_API_KEY:-test-api-key}    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NODE_ENV: ${NODE_ENV:-development}    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

  # Celery Worker (백그라운드 작업)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: celery -A app.core.celery_app worker --loglevel=info
    volumes:
      - ./backend:/app

  # Celery Beat (스케줄러)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - redis
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cc_webapp}
      DB_USER: ${DB_USER:-cc_user}
      DB_PASSWORD: ${DB_PASSWORD:-cc_password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: celery -A app.core.celery_app beat --loglevel=info
    volumes:
      - ./backend:/app

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  backend_logs: