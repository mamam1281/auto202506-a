# CC (Casino-Club) Week 1 프론트엔드 MVP 구현 계획

## 📋 MVP 범위 정의

**목표**: 핵심 게임 플레이와 도파민 루프 메커니즘을 구현하여 사용자 참여도를 검증

### MVP에 포함할 핵심 기능
1. **기본 인증 시스템** (로그인/회원가입)
2. **감정 기반 홈 대시보드**
3. **슬롯 머신 게임** (Variable-Ratio Reward 시스템)
4. **기본 리워드 시스템** (Free Coins)
5. **간단한 프로그레스 추적**

### MVP에서 제외할 기능 (Week 2+ 구현)
- 가챠 시스템
- 배틀패스
- 성인 콘텐츠
- 프리미엄 젬 & 결제
- 복잡한 RFM 세그먼테이션

---

## 🎯 Week 1 구현 페이지 목록

### 1. Authentication Pages
- **`/login`** - 로그인 페이지
- **`/signup`** - 회원가입 페이지
- **`/verify-age`** - 나이 인증 페이지

### 2. Core Game Pages
- **`/`** - 홈 대시보드 (감정 프롬프트 포함)
- **`/games/slot`** - 슬롯 머신 게임
- **`/profile`** - 유저 프로필 & 통계

### 3. Support Pages
- **`/loading`** - 스플래시/로딩 화면
- **`/404`** - 에러 페이지

---

## 📅 Day-by-Day 구현 단계

### Day 1: 프로젝트 셋업 & 기본 구조
```bash
# 프로젝트 초기화
npx create-next-app@latest cc-frontend --typescript --tailwind --eslint
cd cc-frontend
npm install framer-motion lucide-react @types/js-cookie js-cookie
npm install -D @types/node
```

**구현 항목:**
1. **폴더 구조 생성**
   ```
   src/
   ├── components/
   │   ├── ui/           # 재사용 UI 컴포넌트
   │   ├── auth/         # 인증 관련 컴포넌트
   │   ├── games/        # 게임 컴포넌트
   │   └── layout/       # 레이아웃 컴포넌트
   ├── pages/
   ├── hooks/            # 커스텀 훅
   ├── utils/            # 유틸리티 함수
   ├── types/            # TypeScript 타입 정의
   └── constants/        # 상수 정의
   ```

2. **기본 레이아웃 컴포넌트**
   - `Layout.tsx` - 전체 앱 레이아웃
   - `Header.tsx` - 상단 네비게이션
   - `Sidebar.tsx` - 사이드바 (모바일에서는 숨김)

3. **디자인 시스템 기초**
   - `tailwind.config.js` 커스터마이징
   - 색상 팔레트 정의 (카지노 테마: 골드, 레드, 블랙)
   - 기본 애니메이션 클래스

### Day 2: 인증 시스템 구현
**구현 항목:**
1. **인증 컨텍스트 생성**
   ```typescript
   // contexts/AuthContext.tsx
   interface AuthContextType {
     user: User | null;
     login: (email: string, password: string) => Promise<void>;
     signup: (userData: SignupData) => Promise<void>;
     logout: () => void;
     isLoading: boolean;
   }
   ```

2. **페이지 구현**
   - `/pages/login.tsx` - 로그인 폼
   - `/pages/signup.tsx` - 회원가입 폼
   - `/pages/verify-age.tsx` - 나이 인증

3. **API 통신 설정**
   ```typescript
   // utils/api.ts
   const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';
   
   export const authAPI = {
     login: (credentials) => fetch(`${API_BASE}/api/users/login`, {...}),
     signup: (userData) => fetch(`${API_BASE}/api/users/signup`, {...}),
     // ...
   };
   ```

4. **JWT 토큰 관리**
   - 로컬 스토리지 대신 httpOnly 쿠키 사용 권장
   - 토큰 자동 갱신 로직

### Day 3: 홈 대시보드 & 감정 시스템
**구현 항목:**
1. **감정 프롬프트 컴포넌트**
   ```typescript
   // components/emotion/EmotionPrompt.tsx
   interface EmotionPromptProps {
     onEmotionSelect: (emotion: EmotionType) => void;
     isVisible: boolean;
   }
   ```

2. **홈 대시보드 (`/pages/index.tsx`)**
   - 유저 정보 표시 (닉네임, 레벨, 코인)
   - 감정 상태 기반 추천 게임
   - 오늘의 미션 (간단한 버전)
   - 게임 바로가기 버튼들

3. **통계 카드 컴포넌트**
   ```typescript
   // components/dashboard/StatsCard.tsx
   - 총 플레이 횟수
   - 총 획득 코인
   - 연속 플레이 일수 (Streak)
   - 오늘의 게임 횟수
   ```

4. **모바일 반응형 대응**
   - 3컬럼 (데스크톱) → 1컬럼 (모바일)
   - 터치 친화적 버튼 크기

### Day 4: 슬롯 머신 게임 핵심 로직
**구현 항목:**
1. **슬롯 머신 컴포넌트 (`/pages/games/slot.tsx`)**
   ```typescript
   // components/games/SlotMachine.tsx
   interface SlotMachineState {
     reels: string[][];
     isSpinning: boolean;
     result: SpinResult | null;
     userCoins: number;
     spinCost: number;
   }
   ```

2. **Variable-Ratio Reward 로직**
   ```typescript
   // utils/slotLogic.ts
   const calculateWinProbability = (streakCount: number, userSegment: string) => {
     const baseProbability = 0.05; // 5%
     const streakBonus = Math.min(streakCount * 0.01, 0.15); // 최대 15% 보너스
     return baseProbability + streakBonus;
   };
   ```

3. **릴 애니메이션**
   - Framer Motion을 활용한 스핀 애니메이션
   - 각 릴별 시차 애니메이션
   - 승리 시 특별 이펙트

4. **사운드 이펙트 준비**
   - 스핀 사운드
   - 승리/패배 사운드
   - 코인 획득 사운드

### Day 5: 리워드 시스템 & 피드백
**구현 항목:**
1. **리워드 시스템**
   ```typescript
   // utils/rewardSystem.ts
   interface Reward {
     type: 'COIN' | 'XP' | 'STREAK_BONUS';
     amount: number;
     message: string;
   }
   
   const calculateSlotReward = (winType: string, betAmount: number) => {
     // 승리 타입별 배율 적용
   };
   ```

2. **감정 피드백 컴포넌트**
   ```typescript
   // components/feedback/EmotionFeedback.tsx
   - 승리 시: "훌륭해요! 🎉"
   - 패배 시: "다음 기회에! 💪"
   - 연승 시: "대단한 행운이네요! ✨"
   ```

3. **알림 토스트 시스템**
   - 리워드 획득 알림
   - 레벨업 알림
   - 에러 메시지

4. **프로필 페이지 (`/pages/profile.tsx`)**
   - 유저 통계 상세 보기
   - 최근 게임 이력
   - 획득 리워드 이력

### Day 6: 통합 테스트 & 버그픽스
**구현 항목:**
1. **크로스 브라우저 테스트**
   - Chrome, Firefox, Safari, Edge
   - 모바일 브라우저 (iOS Safari, Android Chrome)

2. **성능 최적화**
   - 이미지 최적화 (Next.js Image 컴포넌트)
   - 컴포넌트 lazy loading
   - 번들 크기 분석

3. **접근성 개선**
   - ARIA 레이블 추가
   - 키보드 네비게이션
   - 스크린 리더 지원

4. **에러 핸들링**
   - API 에러 처리
   - 네트워크 오프라인 상태 처리
   - 잘못된 라우트 처리

### Day 7: 배포 준비 & 문서화
**구현 항목:**
1. **환경 변수 설정**
   ```env
   NEXT_PUBLIC_API_URL=https://api.casinoclub.com
   NEXT_PUBLIC_APP_ENV=production
   ```

2. **배포 설정**
   - Vercel 또는 Netlify 배포 설정
   - 도메인 연결
   - SSL 인증서 설정

3. **문서화**
   - README.md 작성
   - 컴포넌트 사용법 문서
   - API 엔드포인트 문서

4. **QA 체크리스트**
   - 회원가입/로그인 플로우
   - 슬롯 게임 정상 작동
   - 리워드 지급 정상 작동
   - 반응형 디자인 확인

---

## 🎨 디자인 가이드라인

### 색상 팔레트
```css
:root {
  --primary-gold: #FFD700;
  --primary-red: #DC143C;
  --dark-bg: #1a1a1a;
  --card-bg: #2d2d2d;
  --text-primary: #ffffff;
  --text-secondary: #cccccc;
  --success: #00ff88;
  --warning: #ffaa00;
}
```

### 타이포그래피
- 헤딩: 'Orbitron' (미래적, 게임적 느낌)
- 본문: 'Inter' (가독성 우선)
- 버튼/라벨: 'Roboto Condensed' (간결함)

### 애니메이션 원칙
- 마이크로 인터랙션 중심
- 60fps 유지
- 모바일에서 성능 고려
- 접근성을 위한 reduced-motion 지원

---

## 🔧 기술 스택 상세

### 필수 라이브러리
```json
{
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.0.0",
    "typescript": "^5.0.0",
    "tailwindcss": "^3.3.0",
    "framer-motion": "^10.0.0",
    "lucide-react": "^0.263.1",
    "js-cookie": "^3.0.5"
  },
  "devDependencies": {
    "@types/js-cookie": "^3.0.3",
    "eslint": "^8.0.0",
    "prettier": "^3.0.0"
  }
}
```

### 파일 구조 예시
```
src/
├── components/
│   ├── ui/
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   ├── Modal.tsx
│   │   └── Toast.tsx
│   ├── auth/
│   │   ├── LoginForm.tsx
│   │   └── SignupForm.tsx
│   ├── games/
│   │   ├── SlotMachine.tsx
│   │   └── ReelAnimation.tsx
│   ├── dashboard/
│   │   ├── EmotionPrompt.tsx
│   │   ├── StatsCard.tsx
│   │   └── GameSelector.tsx
│   └── layout/
│       ├── Layout.tsx
│       ├── Header.tsx
│       └── Navigation.tsx
├── pages/
│   ├── _app.tsx
│   ├── index.tsx
│   ├── login.tsx
│   ├── signup.tsx
│   ├── profile.tsx
│   └── games/
│       └── slot.tsx
├── hooks/
│   ├── useAuth.ts
│   ├── useLocalStorage.ts
│   └── useSlotGame.ts
├── utils/
│   ├── api.ts
│   ├── slotLogic.ts
│   └── rewardSystem.ts
├── types/
│   ├── auth.ts
│   ├── game.ts
│   └── reward.ts
└── constants/
    ├── gameConfig.ts
    └── apiEndpoints.ts
```

---

## ✅ Week 1 완료 기준

### 기능적 요구사항
- [ ] 회원가입/로그인 정상 작동
- [ ] 슬롯 게임 플레이 가능
- [ ] 코인 시스템 작동
- [ ] 감정 피드백 표시
- [ ] 모바일 반응형 대응

### 비기능적 요구사항
- [ ] 페이지 로딩 속도 < 3초
- [ ] 모든 주요 브라우저에서 작동
- [ ] 접근성 기본 요구사항 충족
- [ ] 코드 커버리지 > 70%

### 사용자 경험 요구사항
- [ ] 직관적인 네비게이션
- [ ] 명확한 피드백 메시지
- [ ] 매끄러운 애니메이션
- [ ] 일관된 디자인 시스템

이 계획을 따라 구현하면 Week 1에 핵심 MVP를 완성할 수 있고, 
Week 2부터는 가챠, 배틀패스, 성인 콘텐츠 등 고급 기능을 순차적으로 추가할 수 있습니다.
