# cc-webapp/deployment/nginx/nginx.conf
# Basic Nginx reverse proxy configuration for CC Webapp (Staging Environment Example)

# It's common to run Nginx as a non-root user for better security.
# user www-data; # Or your specific nginx user, e.g., 'nginx'
# Ensure this user has permissions to read/write necessary files (logs, pid, etc.)

# Number of worker processes; 'auto' usually sets it to the number of CPU cores.
worker_processes auto;

# File to store the Nginx main process ID.
pid /var/run/nginx.pid; # Standard path, ensure directory is writable by nginx user.

# Include additional configuration files from /etc/nginx/modules-enabled/.
# This is standard for Debian/Ubuntu based Nginx installations.
include /etc/nginx/modules-enabled/*.conf;

events {
    # Maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024; # Default is often 768 or 1024. Adjust based on expected load.

    # Accept as many connections as possible after a worker process gets a new connection notification.
    # multi_accept on; # Can improve performance under high load.
}

http {
    # Basic Settings
    sendfile on; # Enables sendfile() system call for direct copying of data from one file descriptor to another.
    tcp_nopush on; # Enables Nginx to send HTTP response headers in one packet, right after the data from sendfile().
    tcp_nodelay on; # Disables Nagle's algorithm. Good for applications that require low latency.
    keepalive_timeout 75s; # Timeout during which a keep-alive client connection will stay open on the server side.
    types_hash_max_size 4096; # Increases the  hash table size for MIME types.
    # server_tokens off; # Hides the Nginx version number in HTTP responses for security.

    # Include MIME type mappings.
    include /etc/nginx/mime.types;
    # Default MIME type if a file extension is not found in mime.types.
    default_type application/octet-stream;

    # SSL Settings (Modernized)
    ssl_protocols TLSv1.2 TLSv1.3; # Use only strong, modern TLS versions.
    ssl_prefer_server_ciphers on; # The server dictates the cipher suite.
    # Example strong cipher suite (adapt based on security guidelines and client compatibility):
    # ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    # ssl_session_cache shared:SSL:10m; # Cache for SSL sessions.
    # ssl_session_timeout 1d; # How long SSL sessions are cached.
    # ssl_session_tickets off; # Disable SSL session tickets for better Perfect Forward Secrecy (PFS).

    # Logging Settings
    access_log /var/log/nginx/access.log; # Main access log.
    error_log /var/log/nginx/error.log warn; # Main error log, set to 'warn' level.

    # Gzip Settings (Compression)
    gzip on; # Enable gzip compression.
    gzip_vary on; # Adds 'Vary: Accept-Encoding' header, important for proxies.
    gzip_proxied any; # Compress data even if the request is proxied.
    gzip_comp_level 6; # Compression level (1-9). 6 is a good balance.
    gzip_buffers 16 8k; # Number and size of buffers for compression.
    gzip_http_version 1.1; # Compress for HTTP/1.1 and higher.
    gzip_min_length 256; # Minimum response length to compress.
    gzip_types # Types of files to compress.
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # Define the domain name for your staging environment
    # This should match the domain you configure with DNS and SSL
    # For this example, using staging.cc-webapp.com as per the spec.
    server_names_hash_bucket_size 64; # Adjust if you have many server_name directives.

    # HTTP server block: Redirect all HTTP traffic to HTTPS
    server {
        listen 80;
        # Listen on IPv6 as well if your server supports it
        # listen [::]:80;

        server_name staging.cc-webapp.com; # Replace with your actual staging domain

        # Recommended: If using Certbot for SSL, it can handle this redirect automatically.
        # If managing manually, use a permanent (301) redirect.
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block for the main application
    server {
        listen 443 ssl http2; # Enable HTTP/2 if Nginx is compiled with it.
        # listen [::]:443 ssl http2; # IPv6 listener

        server_name staging.cc-webapp.com; # Replace with your actual staging domain

        # SSL Configuration
        # These paths are placeholders. Replace with your actual certificate and key files.
        # If using Let's Encrypt with Certbot, these are typically symlinks.
        ssl_certificate /etc/letsencrypt/live/staging.cc-webapp.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/staging.cc-webapp.com/privkey.pem;

        # Include recommended SSL options from Certbot or your SSL provider.
        # include /etc/letsencrypt/options-ssl-nginx.conf;
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # Security Headers (adjust policies as needed for your application)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always; # Consider if needed, modern browsers have own XSS protection
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' http://localhost:8000 ws://localhost:8000;" always;
        # Note: CSP needs careful, application-specific configuration. The example above is restrictive.
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; # HSTS - be cautious when first implementing

        # Root location for frontend (Next.js)
        # This assumes your Next.js app (from frontend Docker container) is running and its port 3000
        # is mapped to localhost:3000 on the server where Nginx is running.
        location / {
            proxy_pass http://localhost:3000; # Or http://127.0.0.1:3000
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade; # For WebSocket support (e.g., Next.js HMR in dev, or other WebSocket features)
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host; # Pass the original host header
            proxy_cache_bypass $http_upgrade; # Don't cache WebSocket upgrades

            # Forward client IP and other useful headers
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
        }

        # API location for backend (FastAPI)
        # This assumes your FastAPI backend (from backend Docker container) is running and its port 8000
        # is mapped to localhost:8000 on the server where Nginx is running.
        location /api/ {
            proxy_pass http://localhost:8000/api/; # Forward to FastAPI backend
                                                   # Note the trailing slash here if the location block has one.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade; # If your API might use WebSockets
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;

            # Optional: Increase proxy timeouts if needed for long-running API calls
            # proxy_connect_timeout 75s;
            # proxy_send_timeout 75s;
            # proxy_read_timeout 75s;
        }

        # Optional: Deny access to hidden files (e.g., .git, .env) if web root were ever misconfigured
        location ~ /\. {
            deny all;
        }

        # Optional: Favicon and static assets handling (if not served by Next.js public folder directly)
        # location = /favicon.ico { access_log off; log_not_found off; }
        # location = /robots.txt  { access_log off; log_not_found off; }
        # location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|webp|svg)$ {
        #     expires 1y;
        #     access_log off;
        #     add_header Cache-Control "public";
        # }
    }
}
