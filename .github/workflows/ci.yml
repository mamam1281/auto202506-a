# cc-webapp/.github/workflows/ci.yml
name: CC Webapp CI

on:
  push:
    branches: [ main, master, develop ] # Adjust as needed
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cc-webapp/backend # Corrected working directory
    steps:
    - uses: actions/checkout@v4 # Updated to v4
    - name: Set up Python
      uses: actions/setup-python@v4 # Updated to v4
      with:
        python-version: '3.9' # Match backend Dockerfile if exists, or desired version
        cache: 'pip' # Cache pip dependencies
        cache-dependency-path: cc-webapp/backend/requirements.txt
    - name: Install backend dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run backend tests (pytest)
      run: |
        # This assumes tests handle their own DB/service setup (e.g., SQLite in-memory)
        # or that service containers would be added to this CI job for integration tests.
        pytest tests/
        # Example for future coverage:
        # pip install pytest-cov
        # pytest --cov=app --cov-report=term-missing --cov-report=xml:coverage.xml --cov-fail-under=80 tests/

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cc-webapp/frontend # Corrected working directory
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Or '20', 'lts/*' - match your project's requirement
        cache: 'npm'
        cache-dependency-path: cc-webapp/frontend/package-lock.json
    - name: Install frontend dependencies
      run: npm ci # Use 'ci' for cleaner, faster, more reliable installs in CI
    # - name: Run linters (if configured) # Placeholder for future linting step
    #   run: npm run lint
    - name: Run frontend unit tests (Jest)
      run: npm test -- --coverage --watchAll=false
      # The --coverage flag tells Jest to collect coverage.
      # Configuration for coverage (reporters, thresholds) is in jest.config.js or package.json.
      # Example coverage goal (not enforced by this command alone): "jest": { "coverageThreshold": { "global": { "lines": 80 } } }
    - name: Run frontend E2E tests (Cypress)
      run: |
        echo "Attempting to run Cypress E2E tests..."
        echo "Note: For robust Cypress CI, consider using 'cypress-io/github-action'."
        echo "This action handles browser dependencies, starting a web server, and waiting for it."
        # Example using start-server-and-test (requires dev server to be buildable and startable)
        # npm install -g start-server-and-test wait-on # Install tools globally in CI runner
        # npm run build # Build the Next.js app
        # start-server-and-test start http://localhost:3000 cy:run
        # (Above assumes 'npm run start' serves the built app on port 3000 and 'cy:run' is 'cypress run')
        # For now, just echoing the command that would be run:
        echo "Would run: npm run cy:run"
        # To actually run it without full setup (might fail if server not started):
        # npm run cy:run # This is likely to fail without a running server.

# Optional: Job to indicate overall success if all 'needs' jobs pass
# all-tests-passed:
#   runs-on: ubuntu-latest
#   needs: [test-backend, test-frontend]
#   if: success() # Only run if all needed jobs succeeded
#   steps:
#     - name: All checks passed
#       run: echo "Backend and Frontend tests passed successfully!"
